// FILE: src/test/java/com/example/urlshortener/core/ComprehensiveSystemTest.java
package com.example.urlshortener.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.UUID;
import java.util.HashSet;
import java.util.Set;
import java.util.Optional;

public class ComprehensiveSystemTest {

    private UrlShortenerService service;
    private UserRepository userRepository;
    private SystemSettings systemSettings;
    private UUID adminId;

    @BeforeEach
    void setUp() {
        FileLinkRepository linkRepository = new FileLinkRepository();
        systemSettings = new SystemSettings();
        service = new UrlShortenerService(linkRepository, systemSettings);
        userRepository = new UserRepository();
        adminId = UUID.fromString("00000000-0000-0000-0000-000000000001");
    }

    @Test
    void testCompleteUserJourney() {
        System.out.println("=== –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ ===");

        // 1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
        System.out.println("1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê");
        Optional<UserCredentials> adminCredentials = userRepository.findByUsername("admin");
        assertTrue(adminCredentials.isPresent(), "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");

        boolean adminAuth = PasswordHasher.verifyPassword("admin123", adminCredentials.get().getPasswordHash());
        assertTrue(adminAuth, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π");

        User adminUser = userRepository.createUserFromCredentials(adminCredentials.get());
        assertTrue(adminUser.isAdmin(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
        System.out.println("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

        // 2. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        System.out.println("2. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø");
        String newUsername = "user_" + System.currentTimeMillis();
        UUID newUserId = UUID.randomUUID();
        String passwordHash = PasswordHasher.hashPassword("userpass123");

        UserCredentials newUserCreds = new UserCredentials(newUsername, passwordHash, newUserId, UserRole.USER);
        userRepository.save(newUserCreds);

        Optional<UserCredentials> foundUser = userRepository.findByUsername(newUsername);
        assertTrue(foundUser.isPresent(), "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
        System.out.println("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + newUsername);

        // 3. –°–û–ó–î–ê–ù–ò–ï –ö–û–†–û–¢–ö–ò–• –°–°–´–õ–û–ö
        System.out.println("3. –°–û–ó–î–ê–ù–ò–ï –ö–û–†–û–¢–ö–ò–• –°–°–´–õ–û–ö");
        String[] testUrls = {
                "https://google.com",
                "https://github.com",
                "https://stackoverflow.com"
        };

        String[] shortCodes = new String[testUrls.length];
        for (int i = 0; i < testUrls.length; i++) {
            shortCodes[i] = service.createShortLink(testUrls[i], newUserId);
            assertNotNull(shortCodes[i], "–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
            assertEquals(8, shortCodes[i].length(), "–î–ª–∏–Ω–∞ –∫–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤");
            System.out.println("   –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: " + shortCodes[i] + " -> " + testUrls[i]);
        }

        // 4. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô
        System.out.println("4. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô");
        for (int i = 0; i < shortCodes.length; i++) {
            String redirectedUrl = service.handleRedirect(shortCodes[i]);
            assertEquals(testUrls[i], redirectedUrl, "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            System.out.println("   –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + shortCodes[i] + " -> " + redirectedUrl);
        }

        // 5. –ü–†–û–í–ï–†–ö–ê –°–ß–ï–¢–ß–ò–ö–û–í –ö–õ–ò–ö–û–í
        System.out.println("5. –ü–†–û–í–ï–†–ö–ê –°–ß–ï–¢–ß–ò–ö–û–í –ö–õ–ò–ö–û–í");
        var userLinks = service.getAllUserLinks(newUserId);
        assertEquals(3, userLinks.size(), "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å—Å—ã–ª–∫–∏");

        for (Link link : userLinks) {
            assertTrue(link.getCurrentClicks() >= 1, "–ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 1 –∫–ª–∏–∫");
            assertTrue(LinkValidator.isLinkActive(link), "–í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã");
        }
        System.out.println("‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");

        // 6. –ü–†–û–í–ï–†–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
        System.out.println("6. –ü–†–û–í–ï–†–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô");

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        service.updateDefaultClickLimit(1);
        String limitedUrl = "https://limited.example.com";
        String limitedCode = service.createShortLink(limitedUrl, newUserId);

        // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
        service.handleRedirect(limitedCode);

        // –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        assertThrows(LinkNotActiveException.class, () -> {
            service.handleRedirect(limitedCode);
        }, "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∫–ª–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É");
        System.out.println("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–ª–∏–∫–∞–º —Ä–∞–±–æ—Ç–∞—é—Ç");

        // 7. –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò URL (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        System.out.println("7. –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò URL");

        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL
        assertTrue(UrlValidator.isValidUrl("https://example.com"), "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTPS URL –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é");
        assertTrue(UrlValidator.isValidUrl("http://test.org/path?query=value"), "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP URL –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é");

        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
        assertFalse(UrlValidator.isValidUrl("invalid-url"), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é");
        assertFalse(UrlValidator.isValidUrl(""), "–ü—É—Å—Ç–æ–π URL –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é");
        assertFalse(UrlValidator.isValidUrl(null), "Null URL –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é URL
        String normalized = UrlValidator.normalizeUrl("example.com");
        assertEquals("https://example.com", normalized, "URL –¥–æ–ª–∂–µ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è —Å https://");

        System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Ä–∞–±–æ—Ç–∞–µ—Ç");

        // 8. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        System.out.println("8. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò");

        int originalLimit = service.getDefaultClickLimit();
        long originalTtl = service.getLinkTtlSeconds();

        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        service.updateDefaultClickLimit(100);
        service.updateDefaultTtl(3600L);

        assertEquals(100, service.getDefaultClickLimit());
        assertEquals(3600L, service.getLinkTtlSeconds());

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        service.updateDefaultClickLimit(originalLimit);
        service.updateDefaultTtl(originalTtl);
        System.out.println("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");

        // 9. –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ö–û–î–û–í
        System.out.println("9. –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ö–û–î–û–í");
        Set<String> generatedCodes = new HashSet<>();
        for (int i = 0; i < 10; i++) {
            String code = ShortCodeGenerator.generateUniqueShortCode();
            assertFalse(generatedCodes.contains(code), "–ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏");
            generatedCodes.add(code);
        }
        System.out.println("‚úÖ –í—Å–µ –∫–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã");

        // 10. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
        System.out.println("10. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø");
        assertDoesNotThrow(() -> {
            Logger.log("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            Logger.logUserAction(newUserId, "–¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
            Logger.logAdminAction(adminId, "–ê–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        });
        System.out.println("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");

        System.out.println("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!");
        System.out.println("=== –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ ===");
    }

    @Test
    void testUrlValidationBehavior() {
        System.out.println("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–í–ï–î–ï–ù–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò URL ===");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ UrlValidator
        System.out.println("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ isValidUrl():");
        System.out.println("   https://example.com: " + UrlValidator.isValidUrl("https://example.com"));
        System.out.println("   invalid-url: " + UrlValidator.isValidUrl("invalid-url"));
        System.out.println("   –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: " + UrlValidator.isValidUrl(""));
        System.out.println("   null: " + UrlValidator.isValidUrl(null));

        System.out.println("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ normalizeUrl():");
        try {
            String normalized = UrlValidator.normalizeUrl("example.com");
            System.out.println("   example.com -> " + normalized);
        } catch (Exception e) {
            System.out.println("   normalizeUrl –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " + e.getMessage());
        }

        System.out.println("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ validateUrl():");
        try {
            UrlValidator.validateUrl("https://valid.com");
            System.out.println("   –í–∞–ª–∏–¥–Ω—ã–π URL –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É");
        } catch (Exception e) {
            System.out.println("   –í–∞–ª–∏–¥–Ω—ã–π URL –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " + e.getMessage());
        }

        try {
            UrlValidator.validateUrl("invalid-url");
            System.out.println("   –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)");
        } catch (Exception e) {
            System.out.println("   –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " + e.getMessage());
        }

        System.out.println("‚úÖ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ");
    }

    @Test
    void testServiceWithInvalidUrls() {
        System.out.println("=== –¢–ï–°–¢: –°–û–ó–î–ê–ù–ò–ï –°–°–´–õ–û–ö –° –ù–ï–í–ê–õ–ò–î–ù–´–ú–ò URL ===");

        UUID testUserId = UUID.randomUUID();

        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º URL
        try {
            String shortCode = service.createShortLink("invalid-url", testUserId);
            System.out.println("–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º URL: " + shortCode);
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç URL
        } catch (Exception e) {
            System.out.println("–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: " + e.getMessage());
        }

        // –ü—Ä–æ–±—É–µ–º —Å –ø—É—Å—Ç—ã–º URL
        try {
            String shortCode = service.createShortLink("", testUserId);
            System.out.println("–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—É—Å—Ç—ã–º URL: " + shortCode);
        } catch (Exception e) {
            System.out.println("–°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—É—Å—Ç–æ–π URL: " + e.getMessage());
        }

        System.out.println("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö URL –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }
}
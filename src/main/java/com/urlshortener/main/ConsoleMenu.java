package com.urlshortener.main;

import com.urlshortener.model.ShortLink;
import com.urlshortener.service.UrlShortenerService;

import java.awt.*;
import java.net.URI;
import java.util.*;

public class ConsoleMenu {
    private final UrlShortenerService service;
    private final AppConfig config;
    private final Scanner scanner;
    private UUID currentUserId;

    public ConsoleMenu(UrlShortenerService service, AppConfig config) {
        this.service = service;
        this.config = config;
        this.scanner = new Scanner(System.in);
    }

    public void start() {
        System.out.println("=== –°–ï–†–í–ò–° –ö–û–†–û–¢–ö–ò–• –°–°–´–õ–û–ö ===");
        initializeUser();
        showMainMenu();
    }

    private void initializeUser() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID (–∏–ª–∏ Enter –¥–ª—è –Ω–æ–≤–æ–≥–æ):");
        String input = scanner.nextLine().trim();

        if (input.isEmpty()) {
            currentUserId = UUID.randomUUID();
            System.out.println("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + currentUserId);
        } else {
            try {
                currentUserId = UUID.fromString(input);
                System.out.println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + currentUserId);
            } catch (Exception e) {
                currentUserId = UUID.randomUUID();
                System.out.println("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + currentUserId);
            }
        }
    }

    private void showMainMenu() {
        while (true) {
            System.out.println("\n=== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===");
            System.out.println("1. –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É");
            System.out.println("2. –ü–µ—Ä–µ–π—Ç–∏ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ");
            System.out.println("3. –ú–æ–∏ —Å—Å—ã–ª–∫–∏");
            System.out.println("4. –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ: ");

            String choice = scanner.nextLine();
            switch (choice) {
                case "1":
                    createShortLink();
                    break;
                case "2":
                    processShortLinkClick();
                    break;
                case "3":
                    showUserLinks();
                    break;
                case "4":
                    service.shutdown();
                    System.out.println("–ü–æ–∫–∞!");
                    return;
                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                    break;
            }
        }
    }

    private void createShortLink() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—ã–π URL: ");
        String originalUrl = scanner.nextLine().trim();

        try {
            ShortLink link = service.createShortLink(originalUrl, currentUserId);
            System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω–∞: " + config.getBaseUrl() + "/" + link.getShortCode());
            System.out.println("–õ–∏–º–∏—Ç: " + link.getMaxClicks() + " –ø–µ—Ä–µ—Ö–æ–¥–æ–≤");
            System.out.println("–í—Ä–µ–º—è –∂–∏–∑–Ω–∏: " + config.getDefaultTtlHours() + " —á–∞—Å–æ–≤");
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void processShortLinkClick() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É: ");
        String input = scanner.nextLine().trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –≤–≤–µ–ª–∏ –ø–æ–ª–Ω—É—é)
        String shortCode = input;
        if (input.contains("/")) {
            shortCode = input.substring(input.lastIndexOf('/') + 1);
        }

        try {
            String originalUrl = service.processClick(shortCode);
            System.out.println("üîó –û—Ç–∫—Ä—ã–≤–∞—é: " + originalUrl);

            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().browse(new URI(originalUrl));
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void showUserLinks() {
        var userLinks = service.getUserLinks(currentUserId);

        if (userLinks.isEmpty()) {
            System.out.println("–£ –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫");
            return;
        }

        System.out.println("\n=== –í–ê–®–ò –°–°–´–õ–ö–ò ===");
        for (ShortLink link : userLinks) {
            System.out.printf("–ö–æ–¥: %s | URL: %s | –ö–ª–∏–∫–∏: %d/%d | –ê–∫—Ç–∏–≤–Ω–∞: %s%n",
                    link.getShortCode(), link.getOriginalUrl(),
                    link.getClickCount(), link.getMaxClicks(),
                    link.canBeUsed() ? "‚úì" : "‚úó"
            );
        }
    }
}